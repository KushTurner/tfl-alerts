name: Build and Deploy TFL Alerts

env:
  APP_NAME: tfl-alerts
  GO_VERSION: 1.23.1

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: make build

      - name: Test
        run: make test

  build-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Increment Version
        id: versioning
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "(major)"
          minor_pattern: "(minor)"
          version_format: "${major}.${minor}.${increment}"

      - name: Add version to environment
        run: echo "APP_VERSION=${{ steps.versioning.outputs.version }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.APP_VERSION }}
  deploy:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.DEPLOYMENT_SSH_USER }}
          SSH_KEY: ${{ secrets.DEPLOYMENT_SSH_KEY }}
          SSH_HOST: ${{ secrets.DEPLOYMENT_SSH_HOST }}

      - name: Login to Docker Hub
        run: ssh server 'echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin'

      - name: Run Latest Version
        run: ssh server 'sudo docker run ${{ secrets.DOCKER_USERNAME }}/${{ env.APP_NAME }}:${{ env.APP_VERSION }}'